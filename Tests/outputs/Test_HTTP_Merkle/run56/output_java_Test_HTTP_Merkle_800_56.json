[
    [
        "[1st Phase] Running Initial Circuit Analysis for < Test_HTTP_Merkle >\n",
        0.025888442993164062,
        0.01
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        0.47040796279907227,
        1.7400000000000002
    ],
    [
        "Num of variable reads = 1480\n",
        0.4780266284942627,
        1.77
    ],
    [
        "Num of conditional writes = 0\n",
        0.4842033386230469,
        1.79
    ],
    [
        "Num of words per element = 1\n",
        0.48973631858825684,
        1.8199999999999998
    ],
    [
        "Num of variable writes = 0\n",
        0.4948277473449707,
        1.83
    ],
    [
        "num of accesses = 1480\n",
        0.49950623512268066,
        1.85
    ],
    [
        "Packing Option = 1\n",
        0.5041618347167969,
        1.8599999999999999
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        0.5088136196136475,
        1.88
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        0.5133991241455078,
        1.9
    ],
    [
        "done with read only memory solutions!\n",
        1.1162066459655762,
        2.96
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.1318893432617188,
        2.99
    ],
    [
        "Num of variable reads = 128\n",
        1.144178867340088,
        3.0
    ],
    [
        "Num of conditional writes = 0\n",
        1.1558148860931396,
        3.01
    ],
    [
        "Num of words per element = 1\n",
        1.1671538352966309,
        3.0199999999999996
    ],
    [
        "Num of variable writes = 0\n",
        1.1783018112182617,
        3.0300000000000002
    ],
    [
        "num of accesses = 128\n",
        1.1929140090942383,
        3.0599999999999996
    ],
    [
        "Packing Option = 1\n",
        1.2054083347320557,
        3.0700000000000003
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.2174065113067627,
        3.09
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.229414939880371,
        3.1
    ],
    [
        "Num of variable reads = 520\n",
        1.2409391403198242,
        3.12
    ],
    [
        "Num of conditional writes = 0\n",
        1.2522928714752197,
        3.13
    ],
    [
        "Num of words per element = 1\n",
        1.263383388519287,
        3.14
    ],
    [
        "Num of variable writes = 0\n",
        1.2744474411010742,
        3.15
    ],
    [
        "num of accesses = 520\n",
        1.285297155380249,
        3.16
    ],
    [
        "Packing Option = 1\n",
        1.2975599765777588,
        3.19
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        1.3105950355529785,
        3.21
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        1.3230869770050049,
        3.22
    ],
    [
        "done with read only memory solutions!\n",
        1.5864686965942383,
        3.52
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.6019952297210693,
        3.55
    ],
    [
        "Num of variable reads = 128\n",
        1.6143343448638916,
        3.56
    ],
    [
        "Num of conditional writes = 0\n",
        1.6253507137298584,
        3.57
    ],
    [
        "Num of words per element = 1\n",
        1.636157751083374,
        3.58
    ],
    [
        "Num of variable writes = 0\n",
        1.6494476795196533,
        3.61
    ],
    [
        "num of accesses = 128\n",
        1.6620802879333496,
        3.62
    ],
    [
        "Packing Option = 1\n",
        1.6740593910217285,
        3.63
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.6855194568634033,
        3.64
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.6966502666473389,
        3.65
    ],
    [
        "Num of variable reads = 71\n",
        1.7074525356292725,
        3.67
    ],
    [
        "Num of conditional writes = 0\n",
        1.718017816543579,
        3.68
    ],
    [
        "Num of words per element = 1\n",
        1.728449821472168,
        3.69
    ],
    [
        "Num of variable writes = 0\n",
        1.7387471199035645,
        3.7
    ],
    [
        "num of accesses = 71\n",
        1.7487800121307373,
        3.71
    ],
    [
        "Packing Option = 1\n",
        1.7616379261016846,
        3.74
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        1.7744982242584229,
        3.75
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.786444902420044,
        3.76
    ],
    [
        "Num of variable reads = 128\n",
        1.7978942394256592,
        3.78
    ],
    [
        "Num of conditional writes = 0\n",
        1.8094820976257324,
        3.8
    ],
    [
        "Num of words per element = 1\n",
        1.821629285812378,
        3.82
    ],
    [
        "Num of variable writes = 0\n",
        1.8340094089508057,
        3.85
    ],
    [
        "num of accesses = 128\n",
        1.846153974533081,
        3.86
    ],
    [
        "Packing Option = 0\n",
        1.8581900596618652,
        3.88
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.8716578483581543,
        3.92
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.885512113571167,
        3.94
    ],
    [
        "Num of variable reads = 71\n",
        1.898515224456787,
        3.96
    ],
    [
        "Num of conditional writes = 0\n",
        1.9107944965362549,
        3.97
    ],
    [
        "Num of words per element = 1\n",
        1.922659158706665,
        3.98
    ],
    [
        "Num of variable writes = 0\n",
        1.934084177017212,
        3.99
    ],
    [
        "num of accesses = 71\n",
        1.945523738861084,
        4.01
    ],
    [
        "Packing Option = 1\n",
        1.9571807384490967,
        4.029999999999999
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        1.9689712524414062,
        4.0600000000000005
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.9811220169067383,
        4.08
    ],
    [
        "Num of variable reads = 128\n",
        1.996436357498169,
        4.12
    ],
    [
        "Num of conditional writes = 0\n",
        2.009859323501587,
        4.15
    ],
    [
        "Num of words per element = 1\n",
        2.0342774391174316,
        4.18
    ],
    [
        "Num of variable writes = 0\n",
        2.0469472408294678,
        4.21
    ],
    [
        "num of accesses = 128\n",
        2.0587069988250732,
        4.23
    ],
    [
        "Packing Option = 0\n",
        2.0692577362060547,
        4.26
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.0800893306732178,
        4.29
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.091078758239746,
        4.32
    ],
    [
        "Num of variable reads = 0\n",
        2.101572275161743,
        4.33
    ],
    [
        "Num of conditional writes = 0\n",
        2.1121890544891357,
        4.37
    ],
    [
        "Num of words per element = 1\n",
        2.123044967651367,
        4.42
    ],
    [
        "Num of variable writes = 0\n",
        2.134253740310669,
        4.46
    ],
    [
        "num of accesses = 0\n",
        2.1459474563598633,
        4.51
    ],
    [
        "Packing Option = 0\n",
        2.1581225395202637,
        4.56
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.1711039543151855,
        4.61
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.1837682723999023,
        4.65
    ],
    [
        "Num of variable reads = 8040\n",
        2.1966967582702637,
        4.7
    ],
    [
        "Num of conditional writes = 0\n",
        2.209472417831421,
        4.74
    ],
    [
        "Num of words per element = 1\n",
        2.2223215103149414,
        4.79
    ],
    [
        "Num of variable writes = 0\n",
        2.2350056171417236,
        4.84
    ],
    [
        "num of accesses = 8040\n",
        2.2478692531585693,
        4.89
    ],
    [
        "Packing Option = 1\n",
        2.2600691318511963,
        4.92
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        2.2733383178710938,
        4.96
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        2.2851545810699463,
        4.9799999999999995
    ],
    [
        "done with read only memory solutions!\n",
        2.296830654144287,
        5.0
    ],
    [
        "Phase 1: Analysis Completed!\n",
        2.309403419494629,
        5.029999999999999
    ],
    [
        "[2nd Phase] Running Circuit Generator for < Test_HTTP_Merkle >\n",
        2.321653127670288,
        5.0600000000000005
    ],
    [
        "Circuit Generation Done for < Test_HTTP_Merkle >  \n",
        5.350125789642334,
        20.87
    ],
    [
        " \t Total Number of Constraints :  1993791\n",
        5.384678602218628,
        21.07
    ],
    [
        "\n",
        5.420850515365601,
        21.32
    ],
    [
        "Instruction queue size: 7372401\n",
        5.450640439987183,
        21.470000000000002
    ],
    [
        "Normal execution\n",
        11.988393783569336,
        29.25
    ],
    [
        "Running Sample Run: run8001\n",
        12.015721797943115,
        29.27
    ],
    [
        "../Tests/tls_data.txt\n",
        12.040107250213623,
        29.27
    ],
    [
        "../Tests/merkle_data.txt\n",
        12.064613580703735,
        29.29
    ],
    [
        "Url assignment done\n",
        12.089683771133423,
        29.330000000000002
    ],
    [
        "Evaluating Input on the circuit \n",
        12.116563320159912,
        29.400000000000002
    ],
    [
        "\t[input] Value of Wire # 0 (The one-input wire.) :: 1\n",
        12.146775007247925,
        29.47
    ],
    [
        "\t[input] Value of Wire # 2 :: 6e8\n",
        12.1786470413208,
        29.54
    ],
    [
        "\t[input] Value of Wire # 19 :: 108\n",
        12.21037745475769,
        29.57
    ],
    [
        "\t[input] Value of Wire # 20 :: 4\n",
        12.241520404815674,
        29.6
    ],
    [
        "\t[input] Value of Wire # 21 :: 6\n",
        12.272331953048706,
        29.64
    ],
    [
        "\t[input] Value of Wire # 22 :: 297ca9c14951fbaad217dc76566893385ae3ed90b54baf41c6ba205e35a0b646\n",
        12.30481505393982,
        29.68
    ],
    [
        "\t[input] Value of Wire # 23 :: e3\n",
        12.336280107498169,
        29.71
    ],
    [
        "\t[input] Value of Wire # 32 :: bf\n",
        12.368441343307495,
        29.75
    ],
    [
        "\t[input] Value of Wire # 41 :: a4\n",
        12.40079927444458,
        29.82
    ],
    [
        "\t[input] Value of Wire # 50 :: 1\n",
        12.433407545089722,
        29.89
    ],
    [
        "\t[input] Value of Wire # 59 :: a4\n",
        12.465258836746216,
        29.93
    ],
    [
        "\t[input] Value of Wire # 68 :: 40\n",
        12.49694538116455,
        29.97
    ],
    [
        "\t[input] Value of Wire # 77 :: ed\n",
        12.529072523117065,
        30.0
    ],
    [
        "\t[input] Value of Wire # 86 :: 41\n",
        12.560795783996582,
        30.04
    ],
    [
        "\t[input] Value of Wire # 95 :: f\n",
        12.592414379119873,
        30.07
    ],
    [
        "\t[input] Value of Wire # 104 :: 3b\n",
        12.62389612197876,
        30.11
    ],
    [
        "\t[input] Value of Wire # 113 :: d0\n",
        12.6512770652771,
        30.150000000000002
    ],
    [
        "\t[input] Value of Wire # 122 :: b2\n",
        12.676952362060547,
        30.16
    ],
    [
        "\t[input] Value of Wire # 131 :: 5e\n",
        12.704452991485596,
        30.21
    ],
    [
        "\t[input] Value of Wire # 140 :: 1f\n",
        12.72958517074585,
        30.23
    ],
    [
        "\t[input] Value of Wire # 149 :: b7\n",
        12.756997108459473,
        30.27
    ],
    [
        "\t[input] Value of Wire # 158 :: 92\n",
        12.797052383422852,
        30.330000000000002
    ],
    [
        "\t[input] Value of Wire # 167 :: 9f\n",
        12.82776927947998,
        30.42
    ],
    [
        "\t[input] Value of Wire # 176 :: 37\n",
        12.859522104263306,
        30.490000000000002
    ],
    [
        "\t[input] Value of Wire # 185 :: 6b\n",
        12.88808560371399,
        30.5
    ],
    [
        "\t[input] Value of Wire # 194 :: 74\n",
        12.917370796203613,
        30.54
    ],
    [
        "\t[input] Value of Wire # 203 :: bb\n",
        12.947026491165161,
        30.57
    ],
    [
        "\t[input] Value of Wire # 212 :: 39\n",
        12.973381519317627,
        30.57
    ],
    [
        "\t[input] Value of Wire # 221 :: 5\n",
        12.99825930595398,
        30.580000000000002
    ],
    [
        "\t[input] Value of Wire # 230 :: 2b\n",
        13.022519826889038,
        30.580000000000002
    ],
    [
        "\t[input] Value of Wire # 239 :: 43\n",
        13.04618501663208,
        30.580000000000002
    ],
    [
        "\t[input] Value of Wire # 248 :: 1d\n",
        13.070712804794312,
        30.580000000000002
    ],
    [
        "\t[input] Value of Wire # 257 :: 93\n",
        13.094543218612671,
        30.580000000000002
    ],
    [
        "\t[input] Value of Wire # 266 :: a9\n",
        13.119413614273071,
        30.580000000000002
    ],
    [
        "\t[input] Value of Wire # 275 :: b7\n",
        13.142598390579224,
        30.580000000000002
    ],
    [
        "\t[input] Value of Wire # 284 :: f2\n",
        13.165798425674438,
        30.580000000000002
    ],
    [
        "\t[input] Value of Wire # 293 :: cb\n",
        13.189018487930298,
        30.59
    ],
    [
        "\t[input] Value of Wire # 302 :: 99\n",
        13.309465646743774,
        30.59
    ],
    [
        "\t[input] Value of Wire # 311 :: cf\n",
        13.309592247009277,
        30.59
    ],
    [
        "\t[input] Value of Wire # 320 :: a3\n",
        13.309648036956787,
        30.59
    ],
    [
        "\t[input] Value of Wire # 329 :: 2f\n",
        13.309704780578613,
        30.59
    ],
    [
        "\t[input] Value of Wire # 338 :: d4\n",
        13.309772729873657,
        30.59
    ],
    [
        "\t[input] Value of Wire # 347 :: 0\n",
        13.309829711914062,
        30.59
    ],
    [
        "\t[input] Value of Wire # 356 :: 0\n",
        13.309879541397095,
        30.59
    ],
    [
        "\t[input] Value of Wire # 365 :: 0\n",
        13.309928894042969,
        30.59
    ],
    [
        "\t[input] Value of Wire # 374 :: 0\n",
        13.309980869293213,
        30.59
    ],
    [
        "\t[input] Value of Wire # 383 :: 0\n",
        13.31002950668335,
        30.59
    ],
    [
        "\t[input] Value of Wire # 392 :: 0\n",
        13.310081005096436,
        30.59
    ],
    [
        "\t[input] Value of Wire # 401 :: 0\n",
        13.310131311416626,
        30.59
    ],
    [
        "\t[input] Value of Wire # 410 :: 0\n",
        13.310180187225342,
        30.59
    ],
    [
        "\t[input] Value of Wire # 419 :: 0\n",
        13.310228824615479,
        30.59
    ],
    [
        "\t[input] Value of Wire # 428 :: 0\n",
        13.310278177261353,
        30.59
    ],
    [
        "\t[input] Value of Wire # 437 :: 0\n",
        13.310327291488647,
        30.59
    ],
    [
        "\t[input] Value of Wire # 446 :: 0\n",
        13.310376644134521,
        30.59
    ],
    [
        "\t[input] Value of Wire # 455 :: 0\n",
        13.310425043106079,
        30.59
    ],
    [
        "\t[input] Value of Wire # 464 :: 0\n",
        13.310472965240479,
        30.59
    ],
    [
        "\t[input] Value of Wire # 473 :: 0\n",
        13.310521841049194,
        30.59
    ],
    [
        "\t[input] Value of Wire # 482 :: 0\n",
        13.310571193695068,
        30.59
    ],
    [
        "\t[input] Value of Wire # 491 :: 0\n",
        13.310619831085205,
        30.59
    ],
    [
        "\t[input] Value of Wire # 500 :: 0\n",
        13.310668468475342,
        30.59
    ],
    [
        "\t[input] Value of Wire # 509 :: 0\n",
        13.310716152191162,
        30.59
    ],
    [
        "\t[input] Value of Wire # 518 :: 0\n",
        13.310763835906982,
        30.59
    ],
    [
        "\t[input] Value of Wire # 527 :: 0\n",
        13.310813665390015,
        30.59
    ],
    [
        "\t[input] Value of Wire # 536 :: 0\n",
        13.31086277961731,
        30.59
    ],
    [
        "\t[input] Value of Wire # 545 :: 0\n",
        13.310919523239136,
        30.59
    ],
    [
        "\t[input] Value of Wire # 554 :: 0\n",
        13.31096863746643,
        30.59
    ],
    [
        "\t[input] Value of Wire # 563 :: 0\n",
        13.311017513275146,
        30.59
    ],
    [
        "\t[input] Value of Wire # 572 :: 0\n",
        13.311068296432495,
        30.59
    ],
    [
        "\t[input] Value of Wire # 581 :: 0\n",
        13.311116933822632,
        30.59
    ],
    [
        "\t[input] Value of Wire # 590 :: 0\n",
        13.311165809631348,
        30.59
    ],
    [
        "\t[input] Value of Wire # 599 :: 0\n",
        13.311214447021484,
        30.59
    ],
    [
        "\t[input] Value of Wire # 608 :: 0\n",
        13.311261892318726,
        30.59
    ],
    [
        "\t[input] Value of Wire # 617 :: 0\n",
        13.311309576034546,
        30.59
    ],
    [
        "\t[input] Value of Wire # 626 :: 0\n",
        13.311357975006104,
        30.59
    ],
    [
        "\t[input] Value of Wire # 635 :: 0\n",
        13.311407804489136,
        30.59
    ],
    [
        "\t[input] Value of Wire # 644 :: 0\n",
        13.311457633972168,
        30.59
    ],
    [
        "\t[input] Value of Wire # 653 :: 0\n",
        13.311509609222412,
        30.59
    ],
    [
        "\t[input] Value of Wire # 662 :: 0\n",
        13.311558723449707,
        30.59
    ],
    [
        "\t[input] Value of Wire # 671 :: 0\n",
        13.311607122421265,
        30.59
    ],
    [
        "\t[input] Value of Wire # 680 :: 0\n",
        13.31165599822998,
        30.59
    ],
    [
        "\t[input] Value of Wire # 689 :: 0\n",
        13.31170916557312,
        30.59
    ],
    [
        "\t[input] Value of Wire # 698 :: 0\n",
        13.311757802963257,
        30.59
    ],
    [
        "\t[input] Value of Wire # 707 :: 0\n",
        13.311806440353394,
        30.59
    ],
    [
        "\t[input] Value of Wire # 716 :: 0\n",
        13.311858892440796,
        30.59
    ],
    [
        "\t[input] Value of Wire # 725 :: 0\n",
        13.311906576156616,
        30.59
    ],
    [
        "\t[input] Value of Wire # 734 :: 0\n",
        13.311954259872437,
        30.59
    ],
    [
        "\t[input] Value of Wire # 743 :: 0\n",
        13.312001705169678,
        30.59
    ],
    [
        "\t[input] Value of Wire # 752 :: 0\n",
        13.312049388885498,
        30.59
    ],
    [
        "\t[input] Value of Wire # 761 :: 0\n",
        13.312099695205688,
        30.59
    ],
    [
        "\t[input] Value of Wire # 770 :: 0\n",
        13.312148332595825,
        30.59
    ],
    [
        "\t[input] Value of Wire # 779 :: 0\n",
        13.312196969985962,
        30.59
    ],
    [
        "\t[input] Value of Wire # 788 :: 0\n",
        13.31224513053894,
        30.59
    ],
    [
        "\t[input] Value of Wire # 797 :: 0\n",
        13.312292337417603,
        30.59
    ],
    [
        "\t[input] Value of Wire # 806 :: 0\n",
        13.312340021133423,
        30.59
    ],
    [
        "\t[input] Value of Wire # 815 :: 0\n",
        13.312387466430664,
        30.59
    ],
    [
        "\t[input] Value of Wire # 824 :: 0\n",
        13.312435388565063,
        30.59
    ],
    [
        "\t[input] Value of Wire # 833 :: 0\n",
        13.31248426437378,
        30.59
    ],
    [
        "\t[input] Value of Wire # 842 :: 0\n",
        13.3125319480896,
        30.59
    ],
    [
        "\t[input] Value of Wire # 851 :: 0\n",
        13.312579870223999,
        30.59
    ],
    [
        "\t[input] Value of Wire # 860 :: 0\n",
        13.312628269195557,
        30.59
    ],
    [
        "\t[input] Value of Wire # 869 :: 0\n",
        13.312678098678589,
        30.59
    ],
    [
        "\t[input] Value of Wire # 878 :: 0\n",
        13.312727212905884,
        30.59
    ],
    [
        "\t[input] Value of Wire # 887 :: 0\n",
        13.312775373458862,
        30.59
    ],
    [
        "\t[input] Value of Wire # 896 :: 0\n",
        13.31282353401184,
        30.59
    ],
    [
        "\t[input] Value of Wire # 905 :: 0\n",
        13.312871932983398,
        30.59
    ],
    [
        "\t[input] Value of Wire # 914 :: 0\n",
        13.312920808792114,
        30.59
    ],
    [
        "\t[input] Value of Wire # 923 :: 0\n",
        13.312968969345093,
        30.59
    ],
    [
        "\t[input] Value of Wire # 932 :: 0\n",
        13.31301736831665,
        30.59
    ],
    [
        "\t[input] Value of Wire # 941 :: 0\n",
        13.313065767288208,
        30.59
    ],
    [
        "Done",
        13.321014404296875,
        30.59
    ]
]